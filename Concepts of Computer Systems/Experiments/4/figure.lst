   1 0000               # File:		$Id$
   2 0000               # Author:	J. Heliotis, (author's version 1.3)
   3 0000               # Contributors:	K. Reek, 
   4 0000               # 		P. White, 
   5 0000               #		Thomas Landi
   6 0000               # Description:	This program reads a description of a geometric
   7 0000               #		figure from standard input and displays some
   8 0000               #		further information about it. Currently, the
   9 0000               #		program handles two types of figures: blocks
  10 0000               #		(rectangles) and circles.
  11 0000               #
  12 0000               # Purpose:	To demonstrate the implementation of polymorphic
  13 0000               #		subroutine calls
  14 0000               #
  15 0000               # Revisions:	$Log$
  16 0000               #		4/1/04	M. Reek changed to use MIPS linkage conventions
  17 0000               #
  18 0000               # CONSTANTS
  19 0000               #
  20 0000               # syscall codes
  21 0000               PRINT_INT =	1
  22 0000               PRINT_STRING = 	4
  23 0000               READ_INT = 	5
  24 0000               READ_STRING =	8
  25 0000               
  26 0000               # various frame sizes used by different routines
  27 0000               
  28 0000               FRAMESIZE_8 = 	8
  29 0000               FRAMESIZE_24 =	24
  30 0000               FRAMESIZE_40 =	40
  31 0000               FRAMESIZE_48 =	48
  32 0000               
  33 0000               	.data
  34 0000               	.align 2
  35 0000               
  36 0000               	#
  37 0000               	# Memory for allocating up to 100 figures.
  38 0000               	#
  39 0000               next:	
  40 0000 00000004		.word	pool		# ptr into the pool where next free
  41 0004               				# space is located
  42 0004               pool:	
  43 0004 00000000		.space	1200		# room for 100 figures
          00000000
          00000000
          00000000
          00000000
          00000000
  44 04b4               pool_end:			# a marker for the end of the free space
  45 04b4 00000000		.word	0		# used to tell us if we are out of mem
  46 04b8               
  47 04b8               fig_width:
  48 04b8 00000000		.word	0
  49 04bc               fig_height:
  50 04bc 00000000		.word	0
  51 04c0               
  52 04c0               	.align 0
  53 04c0               fig_char:
  54 04c0 30313233		.asciiz	"0123456789"	# I know this isn't a character, but
          34353637
          383900  
  55 04cb               				# SPIMs only has read_string, which 
  56 04cb               				# reads to eol and then null
  57 04cb               				# terminates the string it read in
  58 04cb               
  59 04cb               	#
  60 04cb               	# some constants for the code
  61 04cb               	#
  62 04cb               PI	= 3			# an bad integer approx. to pi, 3.14159...
  63 04cb               
  64 04cb               char_c:	
  65 04cb 43      		.ascii	"C"
  66 04cc               char_b:	
  67 04cc 42      		.ascii	"B"
  68 04cd               
  69 04cd               new_error:
  70 04cd 4F757420		.asciiz	"Out of memory for allocating figures.\n"
          6F66206D
          656D6F72
          7920666F
          7220616C
          6C6F6361
  71 04f4               
  72 04f4               figure_type_error_string:
  73 04f4 496C6C65		.asciiz	"Illegal figure type\n"
          67616C20
          66696775
          72652074
          7970650A
          00      
  74 0509               
  75 0509               circle_string:
  76 0509 43697263		.asciiz	"Circle ("
          6C652028
          00      
  77 0512               
  78 0512               block_string:
  79 0512 426C6F63		.asciiz	"Block ("
          6B202800
  80 051a               
  81 051a               comma_string:
  82 051a 2C00    		.asciiz	","
  83 051c               
  84 051c               area_string:
  85 051c 29202D20		.asciiz	") - area = "
          61726561
          203D2000
  86 0528               
  87 0528               perimeter_string:
  88 0528 3B207065		.asciiz	"; perimeter = "
          72696D65
          74657220
          3D2000  
  89 0537               
  90 0537               new_line:
  91 0537 0A00    		.asciiz	"\n"
  92 0539               
  93 0539               #
  94 0539               # Name:		MAIN PROGRAM
  95 0539               #
  96 0539               # Description:	Main logic for the program.
  97 0539               #
  98 0539               #		The program reads three values from standard input:
  99 0539               #		1) a character representing the type of figure to create
 100 0539               #		2) an integer representing the width of the bounding box
 101 0539               #			of the figure
 102 0539               #		3) an integer representing the height of the bounding box
 103 0539               #			of the figure
 104 0539               #
 105 0539               #		After creating the specified figure object, the program then
 106 0539               #		displays all available information on the object created.
 107 0539               #
 108 0539               
 109 0000               	.text			# this is program code
 110 0000               	.align 2		# instructions must be on word boundaries
 111 0000               	.globl main		# main is a global label
 112 0000               
 113 0000               main:
 114 0000               	# allocate stack frame according to formula & save state
 115 0000               
 116 0000 23BDFFE8		addi 	$sp, $sp,-FRAMESIZE_24   	
 117 0004 AFBF0014		sw 	$ra, -4+FRAMESIZE_24($sp)	
 118 0008 AFB10010		sw 	$s1, -8+FRAMESIZE_24($sp)
 119 000c AFB0000C		sw 	$s0, -12+FRAMESIZE_24($sp)
 120 0010               
 121 0010               	#
 122 0010               	# Read the character representing the figure type
 123 0010               	#
 124 0010               
 125 0010 34020008		li 	$v0, READ_STRING	# read a string	
 126 0014 3C040000		la 	$a0, fig_char	# place to store the char read in
     0018 34840000
 127 001c 20050009		addi	$a1, $zero, 9	# the number of characters to read
 128 0020 0000000C		syscall
 129 0024               
 130 0024               	#
 131 0024               	# Read the width into r1
 132 0024               	#
 133 0024 34020005		li	$v0, READ_INT
 134 0028 0000000C		syscall
 135 002c 00408021		move	$s0, $v0
 136 0030               
 137 0030               	#
 138 0030               	# Read the height into r2
 139 0030               	#
 140 0030 34020005		li	$v0, READ_INT
 141 0034 0000000C		syscall
 142 0038 00408821		move	$s1, $v0
 143 003c               
 144 003c               	#
 145 003c               	# Do the output
 146 003c               	#
 147 003c 02002021		move	$a0, $s0
 148 0040 02202821		move	$a1, $s1
 149 0044 0C000072		jal	output_figures
 150 0048               
 151 0048               #
 152 0048               # All done -- exit the program!
 153 0048               #
 154 0048 8FBF0014		lw 	$ra, -4+FRAMESIZE_24($sp)	
 155 004c 8FB10010		lw 	$s1, -8+FRAMESIZE_24($sp)
 156 0050 8FB0000C		lw 	$s0, -12+FRAMESIZE_24($sp)
 157 0054               
 158 0054 23BD0018		addi 	$sp, $sp, FRAMESIZE_24   	
 159 0058 03E00008		jr 	$ra		# return from main and exit spim
 160 005c               	
 161 005c               
 162 005c               # ***********************************************************************
 163 005c               # *                                                                     *
 164 005c               # * THIS IS THE START OF EXPERIMENT-SPECIFIC CODE                       *
 165 005c               # *                                                                     *
 166 005c               # ***********************************************************************
 167 005c               
 168 005c               # Name:		Constants to keep in mind while working with figures
 169 005c               #
 170 005c               
 171 005c               # A Figure contains three words 
 172 005c               #		address of virtual function table at offset 0 in fig object
 173 005c               #		figure width 	at offset 4 in fig object
 174 005c               #		figure height 	at offset 8 in fig object
 175 005c               # Making the figures size as 12 bytes
 176 005c               
 177 005c               # A Figure virtual function table contains two function addresses (words):
 178 005c               #		addr area function 	at offset 0 in vtable
 179 005c               #		addr perimeter function	at offset 4 in vtable
 180 005c               #
 181 005c               
 182 005c               #
 183 005c               # Name:		new_figure
 184 005c               #
 185 005c               # Description:	Allocate space for a new figure from the pool of
 186 005c               #		available space. Luckily, both subclasses of FIGURE
 187 005c               #		take up the same amount of space.
 188 005c               #
 189 005c               # Arguments:	None.
 190 005c               # Returns:	v0: the address of the newly allocated figure.
 191 005c               #
 192 005c               
 193 005c               new_figure:
 194 005c               	#
 195 005c               	# See if there is any space left in the pool.
 196 005c               	#
 197 005c               
 198 005c 3C010000		lw	$t0, next
     0060 8C280000
 199 0064 3C090000		la	$t1, pool_end
     0068 35290000
 200 006c               
 201 006c 0109502A		slt	$t2, $t0, $t1	# Compare next addr to end of pool
 202 0070 15400006		bne	$t2, $zero, new_figure_ok	#  if less, still have space
 203 0074               
 204 0074               	#
 205 0074               	# No space left; write error message and exit.
 206 0074               	#
 207 0074               
 208 0074 34020004		li 	$v0, PRINT_STRING	# print error message
 209 0078 3C040000		la 	$a0, new_error
     007c 34840000
 210 0080 0000000C		syscall	
 211 0084               
 212 0084 3402000A		li 	$v0, 10		# terminate program
 213 0088 0000000C		syscall	
 214 008c               
 215 008c               new_figure_ok:
 216 008c               	#
 217 008c               	# There is space available.  Allocate the next figure, and
 218 008c               	# initialize all of its fields.
 219 008c               	#
 220 008c               
 221 008c 01001021		move	$v0, $t0	# set up to return spot for new figure
 222 0090 2108000C		addi	$t0, $t0, 12	# Adjust pointer to next figure
 223 0094 3C010000		sw	$t0, next
     0098 AC280000
 224 009c               
 225 009c               	#
 226 009c               	# Clear all fields.
 227 009c               	#
 228 009c               
 229 009c AC400000		sw	$zero, 0($v0)
 230 00a0 AC400004		sw	$zero, 4($v0)
 231 00a4 AC400008		sw	$zero, 8($v0)
 232 00a8               
 233 00a8 03E00008		jr	$ra
 234 00ac               
 235 00ac               
 236 00ac               #
 237 00ac               # Name:		figure_make
 238 00ac               #
 239 00ac               # Description:	Initialize the components of the figure object.
 240 00ac               #		Since FIGURE is an abstract class, it is expected that
 241 00ac               #		the creation subroutines for child classes will call this
 242 00ac               #		subroutine.
 243 00ac               #
 244 00ac               # Arguments:	a0 contains the height of the figure's bounding box
 245 00ac               #		a1 contains the width of the figure's bounding box
 246 00ac               #		a2 contains the address of the figure object
 247 00ac               #
 248 00ac               figure_make:
 249 00ac               
 250 00ac ACC50004		sw 	$a1, 4($a2)	# store the width in the fig object
 251 00b0 ACC40008		sw 	$a0, 8($a2)	# store the height in the fig object
 252 00b4               
 253 00b4 03E00008		jr	$ra
 254 00b8               
 255 00b8               # CODE FOR FIGURE SUBCLASS BLOCK
 256 00b8               
 257 00b8               #***** BEGIN STUDENT CODE BLOCK 1 ********************************
 258 00b8               #
 259 00b8               # Using the circle code below as your guide, write everything
 260 00b8               # necessary to implement the FIGURE child class called BLOCK.
 261 00b8               # This involves defining BLOCK's virtual function table, its
 262 00b8               # creation routine, block_make, and its two virtual (polymorphic)
 263 00b8               # functions, block_area and block_perimeter.
 264 00b8               #
 265 00b8               
 266 0539               	.data
 267 0539 000000  		.align	2
 268 053c               
 269 053c               block_vtbl:
 270 053c 00000000		.word	block_area
 271 0540 00000000		.word	block_perimeter
 272 0544               
 273 00b8               	.text
 274 00b8               #
 275 00b8               # Name:		block_make
 276 00b8               #
 277 00b8               # Description:	Initialize the components of the block object
 278 00b8               #		All this subroutine does is set the virtual function
 279 00b8               #		table, then call figure_make.
 280 00b8               #
 281 00b8               # Arguments:	a0 contains the height of the figure's bounding box
 282 00b8               #		a1 contains the width of the figure's bounding box
 283 00b8               #		a2 contains the address of the figure object
 284 00b8               #
 285 00b8               block_make:
 286 00b8 23BDFFF8		addi	$sp, $sp,-FRAMESIZE_8
 287 00bc AFBF0004		sw	$ra, -4+FRAMESIZE_8($sp)
 288 00c0               
 289 00c0 3C090000		la	$t1, block_vtbl
     00c4 35290000
 290 00c8 ACC90000		sw	$t1, 0($a2)
 291 00cc               
 292 00cc 0C00002B		jal	figure_make
 293 00d0               
 294 00d0 8FBF0004		lw	$ra, -4+FRAMESIZE_8($sp)
 295 00d4 23BD0008		addi	$sp, $sp, FRAMESIZE_8
 296 00d8 03E00008		jr	$ra
 297 00dc               #
 298 00dc               # Name:		block_area
 299 00dc               #
 300 00dc               # Description:	Compute the area of the block figure
 301 00dc               #
 302 00dc               # Arguments:	a0 contains the address of the figure object
 303 00dc               #
 304 00dc               # Returns:	v0 contains the area
 305 00dc               #
 306 00dc               
 307 00dc               block_area:
 308 00dc 23BDFFF8		addi 	$sp, $sp,-FRAMESIZE_8
 309 00e0 AFBF0004		sw 	$ra, -4+FRAMESIZE_8($sp)
 310 00e4               
 311 00e4 8C880004		lw	$t0, 4($a0)			#load the width
 312 00e8 8C890008		lw	$t1, 8($a0)			#load the height
 313 00ec               
 314 00ec 01090018		mul	$v0, $t0, $t1			#multiply the width and height
     00f0 00001012
 315 00f4               
 316 00f4 8FBF0004		lw 	$ra, -4+FRAMESIZE_8($sp)	# restore ra from stack
 317 00f8 23BD0008		addi 	$sp, $sp, FRAMESIZE_8
 318 00fc 03E00008		jr	$ra
 319 0100               
 320 0100               #
 321 0100               # Name:		block_perimeter
 322 0100               #
 323 0100               # Description:	Compute the perimeter of the block figure
 324 0100               #
 325 0100               # Arguments:	a0 contains the address of the figure object
 326 0100               #
 327 0100               # Returns:	v0 contains the perimeter
 328 0100               #
 329 0100               block_perimeter:
 330 0100 23BDFFF8		addi 	$sp, $sp,-FRAMESIZE_8
 331 0104 AFBF0004		sw 	$ra, -4+FRAMESIZE_8($sp)
 332 0108               	
 333 0108 8C880004		lw	$t0, 4($a0)			#load the height and width
 334 010c 8C890008		lw	$t1, 8($a0)
 335 0110               
 336 0110 01084020		add	$t0, $t0, $t0			#double the height and width
 337 0114 01294820		add	$t1, $t1, $t1
 338 0118               
 339 0118 01091020		add	$v0, $t0, $t1			#add the doubled height and width
 340 011c               
 341 011c 8FBF0004		lw 	$ra, -4+FRAMESIZE_8($sp)	# restore ra from stack
 342 0120 23BD0008		addi 	$sp, $sp, FRAMESIZE_8
 343 0124 03E00008		jr	$ra
 344 0128               
 345 0128               
 346 0128               #***** END STUDENT CODE BLOCK 1 **********************************
 347 0128               
 348 0128               # CODE FOR FIGURE SUBCLASS CIRCLE
 349 0128               
 350 0128               #************************************
 351 0544               	.data
 352 0544               	.align	2
 353 0544               
 354 0544               circle_vtbl:
 355 0544 00000000		.word	circle_area
 356 0548 00000000		.word	circle_perimeter
 357 054c               
 358 0128               	.text
 359 0128               #************************************
 360 0128               #
 361 0128               # Name:		circle_make
 362 0128               #
 363 0128               # Description:	Initialize the components of the circle object
 364 0128               #		All this subroutine does is set the virtual function
 365 0128               #		table, then call figure_make.
 366 0128               #
 367 0128               # Arguments:	a0 contains the height of the figure's bounding box
 368 0128               #		a1 contains the width of the figure's bounding box
 369 0128               #		a2 contains the address of the figure object
 370 0128               #
 371 0128               
 372 0128               circle_make:
 373 0128 23BDFFF8		addi 	$sp, $sp,-FRAMESIZE_8
 374 012c AFBF0004		sw 	$ra, -4+FRAMESIZE_8($sp)
 375 0130               
 376 0130 3C090000		la	$t1, circle_vtbl	# get circle's vtable pointer
     0134 35290000
 377 0138 ACC90000		sw	$t1, 0($a2)	# put circle's vtable pointer into this fig
 378 013c               				# object
 379 013c 0C00002B		jal	figure_make
 380 0140               
 381 0140 8FBF0004		lw 	$ra, -4+FRAMESIZE_8($sp)  # get ra off stack, and restore
 382 0144 23BD0008		addi 	$sp, $sp, FRAMESIZE_8
 383 0148 03E00008		jr	$ra
 384 014c               
 385 014c               #
 386 014c               # Name:		circle_area
 387 014c               #
 388 014c               # Description:	Compute the area of the circle figure
 389 014c               #
 390 014c               # Arguments:	a0 contains the address of the figure object
 391 014c               #
 392 014c               # Returns:	v0 contains the area
 393 014c               #
 394 014c               circle_area:
 395 014c 23BDFFF8		addi 	$sp, $sp,-FRAMESIZE_8
 396 0150 AFBF0004		sw 	$ra, -4+FRAMESIZE_8($sp)
 397 0154               
 398 0154 34190003		li	$t9, PI		# get our int approx. for PI = 3
 399 0158               
 400 0158 0C00006A		jal	circle_diameter	# get my diameter in v0
 401 015c               	
 402 015c 34010002		div	$t0, $v0, 2	# t0 = radius
     0160 0041001A
     0164 00004012
 403 0168 01080018		mul	$t1, $t0, $t0	# t1 = radius squared
     016c 00004812
 404 0170 01390018		mul	$v0, $t1, $t9	# v0 = PI * radius squared
     0174 00001012
 405 0178               
 406 0178 8FBF0004		lw 	$ra, -4+FRAMESIZE_8($sp)	# restore ra from stack
 407 017c 23BD0008		addi 	$sp, $sp, FRAMESIZE_8
 408 0180 03E00008		jr	$ra
 409 0184               
 410 0184               #
 411 0184               # Name:		circle_perimeter
 412 0184               #
 413 0184               # Description:	Compute the perimeter of the circle figure
 414 0184               #
 415 0184               # Arguments:	a0 contains the address of the figure object
 416 0184               #
 417 0184               # Returns:	v0 contains the perimeter
 418 0184               #
 419 0184               circle_perimeter:
 420 0184 23BDFFF8		addi 	$sp, $sp,-FRAMESIZE_8
 421 0188 AFBF0004		sw 	$ra, -4+FRAMESIZE_8($sp)
 422 018c               
 423 018c 34190003		li	$t9, PI		# get our int approx. for PI = 3
 424 0190               
 425 0190 0C00006A		jal	circle_diameter	# get my diameter in v0
 426 0194               	
 427 0194 00590018		mul	$v0, $v0, $t9	# v0 = PI * diameter
     0198 00001012
 428 019c               
 429 019c 8FBF0004		lw 	$ra, -4+FRAMESIZE_8($sp)	# restore ra from stack
 430 01a0 23BD0008		addi 	$sp, $sp, FRAMESIZE_8
 431 01a4 03E00008		jr	$ra
 432 01a8               
 433 01a8               #
 434 01a8               # Name:		circle_diameter
 435 01a8               #
 436 01a8               # Description:	Compute the diameter of the circle figure
 437 01a8               #
 438 01a8               # Arguments:	a0 contains the address of the figure object
 439 01a8               #
 440 01a8               # Returns:	v0 contains the diameter
 441 01a8               #
 442 01a8               circle_diameter:
 443 01a8 8C880004		lw	$t0, 4($a0)	# get fig's width
 444 01ac 8C890008		lw	$t1, 8($a0)	# get fig's height
 445 01b0               
 446 01b0 0109502A		slt	$t2, $t0, $t1	# see if width < height
 447 01b4 11400002		beq	$t2, $zero, cd_height_bigger
 448 01b8               
 449 01b8 01001021		move	$v0, $t0	# width is smaller
 450 01bc 03E00008		jr	$ra
 451 01c0               
 452 01c0               cd_height_bigger:
 453 01c0 01201021		move	$v0, $t1	# height is smaller
 454 01c4 03E00008		jr	$ra
 455 01c8               
 456 01c8               #
 457 01c8               # Name:		output_figures
 458 01c8               #
 459 01c8               # Description:	Given the paramters for a figure, make one and print out
 460 01c8               #		its attributes.
 461 01c8               #
 462 01c8               # Arguments:	fig_char: Character representing figure type
 463 01c8               #		a0: width
 464 01c8               #		a1: height
 465 01c8               #
 466 01c8               #
 467 01c8               output_figures:
 468 01c8 23BDFFD0		addi	$sp, $sp,-FRAMESIZE_48
 469 01cc AFBF002C		sw	$ra, -4+FRAMESIZE_48($sp)
 470 01d0 AFB70028		sw	$s7, -8+FRAMESIZE_48($sp)
 471 01d4 AFB60024		sw	$s6, -12+FRAMESIZE_48($sp)
 472 01d8 AFB50020		sw	$s5, -16+FRAMESIZE_48($sp)
 473 01dc AFB4001C		sw	$s4, -20+FRAMESIZE_48($sp)
 474 01e0 AFB30018		sw	$s3, -24+FRAMESIZE_48($sp)
 475 01e4 AFB20014		sw	$s2, -28+FRAMESIZE_48($sp)
 476 01e8 AFB10010		sw	$s1, -32+FRAMESIZE_48($sp)
 477 01ec AFB0000C		sw	$s0, -36+FRAMESIZE_48($sp)
 478 01f0               
 479 01f0 00809821		move	$s3, $a0	# s3 will be the width
 480 01f4 00A0A021		move	$s4, $a1	# s4 will be the height
 481 01f8               
 482 01f8 0C000017		jal	new_figure	# create a new figure
 483 01fc 00408821		move	$s1, $v0	# save the pointer to the fig object
 484 0200               
 485 0200               	#
 486 0200               	# Now, see which one we should make
 487 0200               	#
 488 0200               
 489 0200 3C010000		lbu	$s6, char_c	# get our characters for comparison
     0204 90360000
 490 0208 3C010000		lbu	$s7, char_b
     020c 90370000
 491 0210               
 492 0210 3C010000		lbu	$s5, fig_char	# get the type of fig to create
     0214 90350000
 493 0218               
 494 0218 16B6000B		bne	$s5, $s6, not_circle  # see if creating a circle
 495 021c               	#
 496 021c               	# Set up the arguments to the circle_make call
 497 021c               	# 	a0 contains the height of the figure's bounding box
 498 021c               	# 	a1 contains the width of the figure's bounding box
 499 021c               	#	a2 contains the address of the figure object
 500 021c               	#
 501 021c 02802021		move	$a0, $s4		# s4 was the height
 502 0220 02602821		move	$a1, $s3		# s3 was the width
 503 0224 02203021		move	$a2, $s1		# s1 was the location of new fig object
 504 0228 0C00004A		jal	circle_make
 505 022c               
 506 022c               
 507 022c               	#
 508 022c               	# Print "Circle ("
 509 022c               	#
 510 022c               
 511 022c 34020004		li 	$v0, PRINT_STRING	# print a "Circle ("
 512 0230 3C040000		la 	$a0, circle_string
     0234 34840000
 513 0238 0000000C		syscall	
 514 023c               
 515 023c 02202021		move	$a0, $s1		# send the pointer to the fig object
 516 0240               				# as the arg. to print_rest
 517 0240 0C0000AD		jal	print_rest	# print rest of info of the fig
 518 0244 080000A2		j 	done_output
 519 0248               
 520 0248               
 521 0248               not_circle:
 522 0248 16B7000B		bne	$s5, $s7, not_anything  # see if creating a block
 523 024c               	#
 524 024c               	# Set up the arguments to the block_make call
 525 024c               	# 	a0 contains the height of the figure's bounding box
 526 024c               	# 	a1 contains the width of the figure's bounding box
 527 024c               	#	a2 contains the address of the figure object
 528 024c               	#
 529 024c 02802021		move	$a0, $s4		# s4 was the height
 530 0250 02602821		move	$a1, $s3		# s3 was the width
 531 0254 02203021		move	$a2, $s1		# s1 was the location of new fig object
 532 0258 0C00002E		jal	block_make
 533 025c               
 534 025c               
 535 025c               	#
 536 025c               	# Print "Block ("
 537 025c               	#
 538 025c               
 539 025c 34020004		li 	$v0, PRINT_STRING	# print a "Block ("
 540 0260 3C040000		la 	$a0, block_string
     0264 34840000
 541 0268 0000000C		syscall	
 542 026c               
 543 026c 02202021		move	$a0, $s1		# send the pointer to the fig object
 544 0270               				# as the arg. to print_rest
 545 0270 0C0000AD		jal	print_rest	# print rest of info of the fig
 546 0274 080000A2		j 	done_output
 547 0278               
 548 0278               not_anything:
 549 0278               	#
 550 0278               	# Print error message
 551 0278               	#
 552 0278               
 553 0278 34020004		li 	$v0, PRINT_STRING
 554 027c 3C040000		la 	$a0, figure_type_error_string
     0280 34840000
 555 0284 0000000C		syscall	
 556 0288               
 557 0288               	#
 558 0288               	# exit
 559 0288               	#
 560 0288               
 561 0288               done_output:
 562 0288 8FBF002C		lw	$ra, -4+FRAMESIZE_48($sp)
 563 028c 8FB70028		lw	$s7, -8+FRAMESIZE_48($sp)
 564 0290 8FB60024		lw	$s6, -12+FRAMESIZE_48($sp)
 565 0294 8FB50020		lw	$s5, -16+FRAMESIZE_48($sp)
 566 0298 8FB4001C		lw	$s4, -20+FRAMESIZE_48($sp)
 567 029c 8FB30018		lw	$s3, -24+FRAMESIZE_48($sp)
 568 02a0 8FB20014		lw	$s2, -28+FRAMESIZE_48($sp)
 569 02a4 8FB10010		lw	$s1, -32+FRAMESIZE_48($sp)
 570 02a8 8FB0000C		lw	$s0, -36+FRAMESIZE_48($sp)
 571 02ac 23BD0030		addi	$sp, $sp, FRAMESIZE_48
 572 02b0               
 573 02b0 03E00008		jr	$ra
 574 02b4               
 575 02b4               #
 576 02b4               # Name:		print_rest
 577 02b4               #
 578 02b4               # Description:	prints out the information about a figure
 579 02b4               #
 580 02b4               # Arguments:	a0: contains the address of the figure object
 581 02b4               #
 582 02b4               
 583 02b4               print_rest:
 584 02b4               	#
 585 02b4               	# Save all the S registers & ra
 586 02b4               	#
 587 02b4 23BDFFD8		addi	$sp, $sp,-FRAMESIZE_40
 588 02b8 AFBF0024		sw	$ra, -4+FRAMESIZE_40($sp)
 589 02bc AFB70020		sw	$s7, -8+FRAMESIZE_40($sp)
 590 02c0 AFB6001C		sw	$s6, -12+FRAMESIZE_40($sp)
 591 02c4 AFB50018		sw	$s5, -16+FRAMESIZE_40($sp)
 592 02c8 AFB40014		sw	$s4, -20+FRAMESIZE_40($sp)
 593 02cc AFB30010		sw	$s3, -24+FRAMESIZE_40($sp)
 594 02d0 AFB2000C		sw	$s2, -28+FRAMESIZE_40($sp)
 595 02d4 AFB10008		sw	$s1, -32+FRAMESIZE_40($sp)
 596 02d8 AFB00004		sw	$s0, -36+FRAMESIZE_40($sp)
 597 02dc               
 598 02dc 00808021		move	$s0, $a0	# s0 will be your pointer to figure
 599 02e0               				# since a0 is needed by the syscalls
 600 02e0               
 601 02e0               #***** BEGIN STUDENT CODE BLOCK 2 ********************************
 602 02e0               #
 603 02e0               # Print the figure's width using PRINT_INT. At this point, s0 contains
 604 02e0               # the address of the figure object, and shouldn't be changed.
 605 02e0               #
 606 02e0 34020001		li	$v0, PRINT_INT
 607 02e4 8E040004		lw	$a0, 4($s0)
 608 02e8 0000000C		syscall
 609 02ec               
 610 02ec               #***** END STUDENT CODE BLOCK 2 **********************************
 611 02ec               
 612 02ec 34020004		li 	$v0, PRINT_STRING	# print ','
 613 02f0 3C040000		la 	$a0, comma_string
     02f4 34840000
 614 02f8 0000000C		syscall
 615 02fc               
 616 02fc               #***** BEGIN STUDENT CODE BLOCK 3 ********************************
 617 02fc               #
 618 02fc               # Print the figure's height using PRINT_INT. At this point, s0 contains
 619 02fc               # the address of the figure object, and shouldn't be changed.
 620 02fc               
 621 02fc 34020001		li	$v0, PRINT_INT
 622 0300 8E040008		lw	$a0, 8($s0)
 623 0304 0000000C		syscall
 624 0308               
 625 0308               #***** END STUDENT CODE BLOCK 3 **********************************
 626 0308               	
 627 0308 34020004		li 	$v0, PRINT_STRING 	# print ') - area = '
 628 030c 3C040000		la 	$a0, area_string
     0310 34840000
 629 0314 0000000C		syscall
 630 0318               
 631 0318               #***** BEGIN STUDENT CODE BLOCK 4 ********************************
 632 0318               #
 633 0318               # Print the figure's area using PRINT_INT. At this point, s0 contains
 634 0318               # the address of the figure object, and shouldn't be changed.
 635 0318               #
 636 0318 8E080000		lw	$t0, 0($s0)
 637 031c 8D080000		lw	$t0, 0($t0)
 638 0320 02002021		move	$a0, $s0
 639 0324 0100F809		jalr	$t0
 640 0328 00402021		move	$a0, $v0
 641 032c 34020001		li	$v0, PRINT_INT
 642 0330 0000000C		syscall
 643 0334               		
 644 0334               
 645 0334               #***** END STUDENT CODE BLOCK 4 **********************************
 646 0334               	
 647 0334 34020004		li 	$v0, PRINT_STRING	# print '; perimeter = '
 648 0338 3C040000		la 	$a0, perimeter_string
     033c 34840000
 649 0340 0000000C		syscall
 650 0344               
 651 0344               #***** BEGIN STUDENT CODE BLOCK 5 ********************************
 652 0344               #
 653 0344               # Print the figure's perimeter using PRINT_INT. At this point, s0
 654 0344               # contains the address of the figure object, and shouldn't be changed.
 655 0344               #
 656 0344 8E080000		lw	$t0, 0($s0)
 657 0348 8D080004		lw	$t0, 4($t0)
 658 034c 02002021		move	$a0, $s0
 659 0350 0100F809		jalr	$t0
 660 0354 00402021		move	$a0, $v0
 661 0358 34020001		li	$v0, PRINT_INT
 662 035c 0000000C		syscall
 663 0360               	
 664 0360               #***** END STUDENT CODE BLOCK 5 **********************************
 665 0360               
 666 0360               	
 667 0360 34020004		li 	$v0, PRINT_STRING	# print newline
 668 0364 3C040000		la 	$a0, new_line
     0368 34840000
 669 036c 0000000C		syscall
 670 0370               
 671 0370               	#
 672 0370               	# Restore all the S registers
 673 0370               	#
 674 0370 8FBF0024		lw	$ra, -4+FRAMESIZE_40($sp)
 675 0374 8FB70020		lw	$s7, -8+FRAMESIZE_40($sp)
 676 0378 8FB6001C		lw	$s6, -12+FRAMESIZE_40($sp)
 677 037c 8FB50018		lw	$s5, -16+FRAMESIZE_40($sp)
 678 0380 8FB40014		lw	$s4, -20+FRAMESIZE_40($sp)
 679 0384 8FB30010		lw	$s3, -24+FRAMESIZE_40($sp)
 680 0388 8FB2000C		lw	$s2, -28+FRAMESIZE_40($sp)
 681 038c 8FB10008		lw	$s1, -32+FRAMESIZE_40($sp)
 682 0390 8FB00004		lw	$s0, -36+FRAMESIZE_40($sp)
 683 0394 23BD0028		addi	$sp, $sp, FRAMESIZE_40
 684 0398               
 685 0398 03E00008		jr	$ra


FRAMESIZE_24              = 00000018   
FRAMESIZE_40              = 00000028   
FRAMESIZE_48              = 00000030   
FRAMESIZE_8               = 00000008   
PI                        = 00000003   
PRINT_INT                 = 00000001   
PRINT_STRING              = 00000004   
READ_INT                  = 00000005   
READ_STRING               = 00000008   
area_string                 0000051C R  data 
block_area                  000000DC R  text 
block_make                  000000B8 R  text 
block_perimeter             00000100 R  text 
block_string                00000512 R  data 
block_vtbl                  0000053C R  data 
cd_height_bigger            000001C0 R  text 
char_b                      000004CC R  data 
char_c                      000004CB R  data 
circle_area                 0000014C R  text 
circle_diameter             000001A8 R  text 
circle_make                 00000128 R  text 
circle_perimeter            00000184 R  text 
circle_string               00000509 R  data 
circle_vtbl                 00000544 R  data 
comma_string                0000051A R  data 
done_output                 00000288 R  text 
fig_char                    000004C0 R  data 
fig_height                  000004BC R  data 
fig_width                   000004B8 R  data 
figure_make                 000000AC R  text 
figure_type_error_string    000004F4 R  data 
main                        00000000 RG text 
new_error                   000004CD R  data 
new_figure                  0000005C R  text 
new_figure_ok               0000008C R  text 
new_line                    00000537 R  data 
next                        00000000 R  data 
not_anything                00000278 R  text 
not_circle                  00000248 R  text 
output_figures              000001C8 R  text 
perimeter_string            00000528 R  data 
pool                        00000004 R  data 
pool_end                    000004B4 R  data 
print_rest                  000002B4 R  text 
