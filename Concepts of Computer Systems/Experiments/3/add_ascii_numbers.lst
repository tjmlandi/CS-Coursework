   1 0000               # File:		add_ascii_numbers.asm
   2 0000               # Author:	K. Reek
   3 0000               # Contributors:	P. White, W. Carithers
   4 0000               #		Thomas Landi
   5 0000               #
   6 0000               # Updates:
   7 0000               #		3/2004	M. Reek, named constants
   8 0000               #		10/2007 W. Carithers, alignment
   9 0000               #		09/2009 W. Carithers, separate assembly
  10 0000               #
  11 0000               # Description:	Add two ASCII numbers and store the result in ASCII.
  12 0000               #
  13 0000               # Arguments:	a0: address of parameter block.  The block consists of
  14 0000               #		four words that contain (in this order):
  15 0000               #
  16 0000               #			address of first input string
  17 0000               #			address of second input string
  18 0000               #			address where result should be stored
  19 0000               #			length of the strings and result buffer
  20 0000               #
  21 0000               #		(There is actually other data after this in the
  22 0000               #		parameter block, but it is not relevant to this routine.)
  23 0000               #
  24 0000               # Returns:	The result of the addition, in the buffer specified by
  25 0000               #		the parameter block.
  26 0000               #
  27 0000               
  28 0000               	.globl	add_ascii_numbers
  29 0000               
  30 0000               add_ascii_numbers:
  31 0000               A_FRAMESIZE = 40
  32 0000               
  33 0000               #
  34 0000               # Save registers ra and s0 - s7 on the stack.
  35 0000               #
  36 0000 23BDFFD8		addi 	$sp, $sp, -A_FRAMESIZE
  37 0004 AFBF0024		sw 	$ra, -4+A_FRAMESIZE($sp)
  38 0008 AFB7001C		sw 	$s7, 28($sp)
  39 000c AFB60018		sw 	$s6, 24($sp)
  40 0010 AFB50014		sw 	$s5, 20($sp)
  41 0014 AFB40010		sw 	$s4, 16($sp)
  42 0018 AFB3000C		sw 	$s3, 12($sp)
  43 001c AFB20008		sw 	$s2, 8($sp)
  44 0020 AFB10004		sw 	$s1, 4($sp)
  45 0024 AFB00000		sw 	$s0, 0($sp)
  46 0028               	
  47 0028               # ##### BEGIN STUDENT CODE BLOCK 1 #####
  48 0028               student:
  49 0028 8C910000		lw	$s1, 0($a0)		#first input
  50 002c 8C920004		lw	$s2, 4($a0)		#second input
  51 0030 8C930008		lw	$s3, 8($a0)		#result
  52 0034 8C94000C		lw	$s4, 12($a0)		#length
  53 0038 00008021		move	$s0, $zero
  54 003c 20170039		addi	$s7, $zero, 57
  55 0040               loop:
  56 0040 10140012		beq	$zero, $s4, end		#check if at end of numbers
  57 0044 228BFFFF		addi	$t3, $s4, -1		#get the index we will be working with
  58 0048 022B4820		add	$t1, $s1, $t3		#get the addresses for the numbers
  59 004c 024B5020		add	$t2, $s2, $t3		#we are working with
  60 0050 812C0000		lb	$t4, 0($t1)		#retreive the numbers we are 
  61 0054 814D0000		lb	$t5, 0($t2)		#working with
  62 0058 018D7020		add	$t6, $t4, $t5	
  63 005c 01D07020		add	$t6, $t6, $s0		#add the carry to the sum
  64 0060 21CEFFD0		addi	$t6, $t6, -48		
  65 0064 02EE782A		slt	$t7, $s7, $t6
  66 0068 11E00003		beq	$t7, $zero, else	#see if sum is greater than 9
  67 006c 21CEFFF6		addi	$t6, $t6, -10		#save the difference and the carry
  68 0070 20100001		addi	$s0, $zero, 1
  69 0074 0800001F		j	point
  70 0078               else:
  71 0078 00008021		move	$s0, $zero		#if not, make the carry 0
  72 007c               point:
  73 007c 026B5820		add	$t3, $s3, $t3		
  74 0080 A16E0000		sb	$t6, 0($t3)		#store the sum
  75 0084 2294FFFF		addi	$s4, $s4, -1		#decrement the counter
  76 0088 08000010		j	loop
  77 008c               end:
  78 008c               # ###### END STUDENT CODE BLOCK 1 ######
  79 008c               
  80 008c               #
  81 008c               # Restore registers ra and s0 - s7 from the stack.
  82 008c               #
  83 008c 8FBF0024		lw 	$ra, -4+A_FRAMESIZE($sp)
  84 0090 8FB7001C		lw 	$s7, 28($sp)
  85 0094 8FB60018		lw 	$s6, 24($sp)
  86 0098 8FB50014		lw 	$s5, 20($sp)
  87 009c 8FB40010		lw 	$s4, 16($sp)
  88 00a0 8FB3000C		lw 	$s3, 12($sp)
  89 00a4 8FB20008		lw 	$s2, 8($sp)
  90 00a8 8FB10004		lw 	$s1, 4($sp)
  91 00ac 8FB00000		lw 	$s0, 0($sp)
  92 00b0 23BD0028		addi 	$sp, $sp, A_FRAMESIZE
  93 00b4               
  94 00b4 03E00008		jr	$ra			# Return to the caller.


A_FRAMESIZE        = 00000028   
add_ascii_numbers    00000000 RG text 
else                 00000078 R  text 
end                  0000008C R  text 
loop                 00000040 R  text 
point                0000007C R  text 
student              00000028 R  text 
