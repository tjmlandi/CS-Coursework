   1 0000               # File:		build.asm
   2 0000               # Author:	K. Reek
   3 0000               # Contributors:	P. White,
   4 0000               #		W. Carithers,
   5 0000               #		Thomas Landi
   6 0000               #
   7 0000               # Description:	Binary tree building functions.
   8 0000               #
   9 0000               # Revisions:	$Log$
  10 0000               
  11 0000               
  12 0000               	.text			# this is program code
  13 0000               	.align 2		# instructions must be on word boundaries
  14 0000               
  15 0000               # 
  16 0000               # Name:		add_elements
  17 0000               #
  18 0000               # Description:	loops through array of numbers, adding each (in order)
  19 0000               #		to the tree
  20 0000               #
  21 0000               # Arguments:	a0 the address of the array
  22 0000               #   		a1 the number of elements in the array
  23 0000               #		a2 the address of the root pointer
  24 0000               # Returns:	none
  25 0000               #
  26 0000               
  27 0000               	.globl	add_elements
  28 0000               	
  29 0000               add_elements:
  30 0000 23BDFFF0		addi 	$sp, $sp, -16
  31 0004 AFBF000C		sw 	$ra, 12($sp)
  32 0008 AFB20008		sw 	$s2, 8($sp)
  33 000c AFB10004		sw 	$s1, 4($sp)
  34 0010 AFB00000		sw 	$s0, 0($sp)
  35 0014               
  36 0014               #***** BEGIN STUDENT CODE BLOCK 1 ***************************
  37 0014               #
  38 0014               # Insert your code to iterate through the array, calling build_tree
  39 0014               # for each value in the array.  Remember that build_tree requires
  40 0014               # two parameters:  the address of the variable which contains the
  41 0014               # root pointer for the tree, and the number to be inserted.
  42 0014               #
  43 0014 00808021		move	$s0, $a0
  44 0018 00A08821		move	$s1, $a1
  45 001c 00C02021		move	$a0, $a2	
  46 0020 00009021		move	$s2, $zero
  47 0024               add_top:
  48 0024 02324022		sub	$t0, $s1, $s2
  49 0028 11000008		beq	$t0, $zero, add_end
  50 002c 34090004		li	$t1, 4
  51 0030 01320018		mul	$t2, $t1, $s2
     0034 00005012
  52 0038 01505820		add	$t3, $t2, $s0
  53 003c 8D650000		lw	$a1, 0($t3)
  54 0040 0C000019		jal	build_tree
  55 0044 22520001		addi	$s2, 1
  56 0048 08000009		j	add_top
  57 004c               add_end:
  58 004c               #***** END STUDENT CODE BLOCK 1 *****************************
  59 004c               
  60 004c               add_done:
  61 004c               
  62 004c 8FBF000C		lw 	$ra, 12($sp)
  63 0050 8FB20008		lw 	$s2, 8($sp)
  64 0054 8FB10004		lw 	$s1, 4($sp)
  65 0058 8FB00000		lw 	$s0, 0($sp)
  66 005c 23BD0010		addi 	$sp, $sp, 16
  67 0060 03E00008		jr 	$ra
  68 0064               
  69 0064               #***** BEGIN STUDENT CODE BLOCK 2 ***************************
  70 0064               #
  71 0064               # Put your build_tree subroutine here.
  72 0064               #
  73 0064               
  74 0064               	.globl allocate_mem
  75 0064               
  76 0064               build_tree:
  77 0064 23BDFFE0		addi	$sp, $sp, -32
  78 0068 AFBF001C		sw	$ra, 28($sp)
  79 006c AFB60018		sw	$s6, 24($sp)
  80 0070 AFB50014		sw	$s5, 20($sp)
  81 0074 AFB40010		sw	$s4, 16($sp)
  82 0078 AFB3000C		sw	$s3, 12($sp)
  83 007c AFB20008		sw	$s2, 8($sp)
  84 0080 AFB10004		sw	$s1, 4($sp)
  85 0084 AFB00000		sw	$s0, 0($sp)
  86 0088               
  87 0088 0080A821		move	$s5, $a0		#Save the params
  88 008c 00A08821		move	$s1, $a1
  89 0090               	
  90 0090               	
  91 0090 8EB00000		lw	$s0, 0($s5)		#Move pointer to s0
  92 0094               	
  93 0094 0080B021		move	$s6, $a0		#Allocate the new node
  94 0098 34040003		li	$a0, 3
  95 009c 0C000000		jal	allocate_mem
  96 00a0 00409821		move	$s3, $v0
  97 00a4 AE710000		sw	$s1, 0($s3)
  98 00a8 02C02021		move	$a0, $s6
  99 00ac               
 100 00ac 12000001		beq	$s0, $zero, no_tree	#If there is no root
 101 00b0 0800002F		j	top
 102 00b4               no_tree:				#Make the root of the tree
 103 00b4 AEB30000		sw	$s3, 0($s5)
 104 00b8 08000040		j	build_done
 105 00bc               top:					
 106 00bc 8E190000		lw	$t9, 0($s0)		#Check to see if number is already in tree
 107 00c0 1239000F		beq	$s1, $t9, build_done	#If so, exit without entering value
 108 00c4 0239C82A		slt	$t9, $s1, $t9		#Else, determine if greater or less than current
 109 00c8 13200005		beq	$t9, $zero, right
 110 00cc               left:					#If less, go left
 111 00cc 8E140004		lw	$s4, 4($s0)
 112 00d0 12800008		beq	$s4, $zero, none_left	#If no left node, enter value as left node
 113 00d4 8E100004		lw	$s0, 4($s0)		# and exit
 114 00d8 8E140004		lw	$s4, 4($s0)
 115 00dc 0800002F		j	top	
 116 00e0               right:
 117 00e0 8E140008		lw	$s4, 8($s0)		#If greater, go right
 118 00e4 12800005		beq	$s4, $zero, none_right	#If no right node, enter value as right 
 119 00e8 8E100008		lw	$s0, 8($s0)		# and exit
 120 00ec 8E140008		lw	$s4, 8($s0)
 121 00f0 0800002F		j top
 122 00f4               
 123 00f4               none_left:
 124 00f4 AE130004		sw	$s3, 4($s0)
 125 00f8 08000040		j	build_done
 126 00fc               
 127 00fc               none_right:
 128 00fc AE130008		sw	$s3, 8($s0)
 129 0100               
 130 0100               	
 131 0100               build_done:
 132 0100 8FBF001C		lw	$ra, 28($sp)
 133 0104 8FB60018		lw	$s6, 24($sp)
 134 0108 8FB50014		lw	$s5, 20($sp)
 135 010c 8FB40010		lw	$s4, 16($sp)
 136 0110 8FB3000C		lw	$s3, 12($sp)
 137 0114 8FB20008		lw	$s2, 8($sp)
 138 0118 8FB10004		lw	$s1, 4($sp)
 139 011c 8FB00000		lw	$s0, 0($sp)
 140 0120 23BD0020		addi	$sp, $sp, 32
 141 0124 03E00008		jr	$ra
 142 0128               	
 143 0128               #***** END STUDENT CODE BLOCK 2 *****************************


add_done        0000004C R  text 
add_elements    00000000 RG text 
add_end         0000004C R  text 
add_top         00000024 R  text 
allocate_mem    ******** XG
build_done      00000100 R  text 
build_tree      00000064 R  text 
left            000000CC R  text 
no_tree         000000B4 R  text 
none_left       000000F4 R  text 
none_right      000000FC R  text 
right           000000E0 R  text 
top             000000BC R  text 
