# class methods

Program
%%%
    public static Env env = Env.initEnv(); // the initial environment

    public String toString() {
        // return exp.toString() + "#";
        return exp.eval(env).toString();
    }

%%%

Exp
%%%
    // public abstract Val eval(Env env);
    public Val eval(Env env) {
        Val v = term.eval(env);
	return terms.eval(v, env);
    }

    public String toString() {
        return term.toString() + terms.toString();
    }
%%%

Terms
%%%
    public String toString() {
        String s = "";
        Iterator<Prim0> prim0Iterator = prim0List.iterator();
        Iterator<Term> termIterator = termList.iterator();
        while (prim0Iterator.hasNext()) {
            String prim = prim0Iterator.next().toString();
            String term = termIterator.next().toString();
            s += prim + term;
        }
        return s;
    }

	public Val eval(Val v, Env env) {
		Iterator<Prim0> prim0Iterator = prim0List.iterator();
		Iterator<Term> termIterator = termList.iterator();
		while (prim0Iterator.hasNext()) {
			Prim0 prim0 = prim0Iterator.next();
			Term term = termIterator.next();
			v = prim0.apply(v, term.eval(env));
		}
		return v;
	}
%%%

Term
%%%
    public String toString() {
        return factor.toString() + factors.toString();
    }
	
	public Val eval(Env env) {
		Val v = factor.eval(env);
		return factors.eval(v, env);
	}
%%%

Factors
%%%
    public String toString() {
        String s = "";
        Iterator<Prim1> prim1Iterator = prim1List.iterator();
        Iterator<Factor> factorIterator = factorList.iterator();
        while (prim1Iterator.hasNext()) {
            String prim = prim1Iterator.next().toString();
            String factor = factorIterator.next().toString();
            s += prim + factor;
        }
        return s;
    }

	public Val eval(Val v, Env env) {
		Iterator<Prim1> prim1Iterator = prim1List.iterator();
		Iterator<Factor> factorIterator = factorList.iterator();
		while (prim1Iterator.hasNext()) {
			Prim1 prim1 = prim1Iterator.next();
			Factor factor = factorIterator.next();
			v = prim1.apply(v, factor.eval(env));
		}
		return v;
	}
%%%

Factor
%%%
    public abstract Val eval(Env env);
%%%

LitFactor
%%%
    public String toString() {
        return lit.toString();
    }

	public Val eval(Env env) {
		return new IntVal(lit.toString());
	}
%%%

VarFactor
%%%
    public String toString() {
        return var.toString();
    }

	public Val eval(Env env) {
		return env.applyEnv(var);
	}
%%%

ParenFactor
%%%
    public String toString() {
        return "(" + exp + ")";
    }

	public Val eval(Env env) {
		return exp.eval(env);
	}
%%%

Prim2Factor
%%%
    public String toString() {
        return prim2.toString() + factor.toString();
    }

	public Val eval(Env env) {
		Val factorVal = factor.eval(env);
		return prim2.apply(factorVal);
	}
%%%

PrimappFactor
%%%

    public String toString() {
        return prim.toString()+ "(" + rands + ")";
    }

    public Val eval(Env env) {
        // evaluate the terms in the expression list
        // and apply the prim to the array of integer results
        List<Val> args = rands.evalRands(env);
        Val [] va = Val.toArray(args);
        return prim.apply(va);
    }
%%%

IfFactor
%%%
    public Val eval(Env env) {
        Val testVal = testExp.eval(env);
        if (testVal.isTrue())
            return trueExp.eval(env);
        else
            return falseExp.eval(env);
    }

    public String toString() {
        return "if "+testExp+" then "+trueExp+" else "+falseExp+" endif";
    }
%%%

LetFactor
%%%
    public Val eval(Env env) {
        Env nenv = letDecls.addBindings(env);
        return exp.eval(nenv);
    }

    public String toString() {
        return "let "+letDecls.toString()+"in "+exp.toString();
    }
%%%

LetDecls
%%%
    public Env addBindings(Env env) {
        Rands rands = new Rands(expList);
        List<Val> valList = rands.evalRands(env);
        Bindings bindings = new Bindings(varList, valList);
        return env.extendEnv(bindings);
    }

    public String toString() {
        String s="";
        Iterator<Token> varIterator = varList.iterator();
        Iterator<Exp> expIterator = expList.iterator();
        while (varIterator.hasNext())
            s += varIterator.next().toString()+"="+expIterator.next()+" ";
        return s;
    }
%%%

Rands
%%%
    public String toString() {
        String s = "";   // the string to return
        String sep = ""; // no separator for the first expression
        // get all of the expressions in the expression list
        for (Exp e : expList) {
            s += sep + e;
            sep = ",";   // commas separate the rest of the expressions
        }
        return s;
    }

    // evaluate the individual terms in expList using the given environment
    // and return a List<Val> object
    public List<Val> evalRands(Env env) {
        List<Val> args = new ArrayList<Val>();
        for (Exp e : expList)
            args.add(e.eval(env));
        return args;
    }
%%%

