Val
%%%
import java.util.*;

public abstract class Val {

    public static final Val nil = new NilVal();

    public static Val [] toArray(List<Val> valList) {
        int n = valList.size();
        return valList.toArray(new Val[n]);
    }

    public Val apply(List<Val> valList) {
        throw new RuntimeException(this + ": not a procedure");
    }
    
    public Env env() {
	throw new RuntimeException("<" + this + ">: not an environment");
    }

    public boolean isTrue() {
	return true;
    }

    public boolean isList() {
	return false;
    }

    public boolean isArray() {
        return false;
    }

    public boolean isObject() {
	return false;
    }

    public boolean isClass() {
        return false;
    }

    public IntVal intVal() {
        throw new RuntimeException("cannot convert "+this+" to an IntVal");
    }

    public ListVal listVal() {
        throw new RuntimeException("cannot convert "+this+" to a ListVal");
    }

    public ProcVal procVal() {
        throw new RuntimeException("cannot convert "+this+" to a ProcVal");
    }

    public ClassVal classVal() {
        throw new RuntimeException("cannot convert "+this+" to a ClassVal");
    }

    public ObjectVal objectVal() {
        throw new RuntimeException("cannot convert "+this+" to an ObjVal");
    }

    public ArrayVal arrayVal() {
        throw new RuntimeException("cannot convert "+this+" to an ArrayVal");
    }

    public NilVal nilVal() {
        throw new RuntimeException("cannot convert "+this+" to a NilVal");
    }
        

    public ObjectVal makeObject(Ref objRef) {
        throw new RuntimeException("new " + this + ": not a class");
    }

    public String putc() {
	return this.toString();
    }

	public void iterate(Token var, Exp doExp, Env env) {
		throw new RuntimeException("not iterable");
	}
}
  

%%%

IntVal
%%%
import java.util.*;

public class IntVal extends Val {

    public int val;
    
    public IntVal(String s) {
        val = Integer.parseInt(s);
    }
    
    public IntVal(Val v) {
        val = ((IntVal)v).val;
    }
    
    public IntVal(int v) {
        val = v;
    }

    public boolean isTrue() {
        return val != 0;
    }

    public IntVal intVal() {
        return this;
    }

    public String putc() {
	return "" + (char)val;
    }
    
    public String toString() {
        return "" + val;
    }

}
%%%

ProcVal
%%%
import java.util.*;

public class ProcVal extends Val {

    public Formals formals;
    public Exp body;
    public Env env;

    public ProcVal(Formals formals, Exp body, Env env) {
        this.formals = formals;
        this.body = body;
        this.env = env;
    }

    public Val apply(List<Val> valList) {
        List<Ref> refList = Ref.valsToRefs(valList);
        Bindings bindings = new Bindings(formals.varList, refList);
        Env nenv = env.extendEnvRef(bindings);
        return body.eval(nenv);
    }

    public Env env() {
        return env;
    }

    public ProcVal procVal() {
        return this;
    }

    public String toString() {
        String ret = "proc(";
        String sep = "";
        
        for (Token t : formals.varList) {
            String s = t.toString();
            ret += sep + s;
            sep = ",";
        }
        ret += ")";
        return ret;
    }
}

%%%

NilVal
%%%
import java.util.*;

public class NilVal extends Val {

    public boolean isTrue() {
        return false;
    }

    public NilVal nilVal() {
        return this;
    }

    public String toString() {
        return "nil";
    }

}
%%%

ArrayVal
%%%

public class ArrayVal extends Val implements Len {

    public ValRef [] refArray;
    public int size;

    public ArrayVal(int size) {
        refArray = new ValRef[size];
        for (int i=0 ; i<size ; i++)
            refArray[i] = new ValRef(Val.nil);
        this.size = size;
    }

    public int len() {
        return size;
    }

    public boolean isTrue() {
        return size > 0;
    }

    public ArrayVal arrayVal() {
        return this;
    }

    public boolean isArray() {
        return true;
    }
	
	public void iterate(Token var, Exp doExp, Env env) {
		for (ValRef valRef : refArray) {
			Bindings bindings = new Bindings();
			bindings.add(var.toString(), valRef);
			Env nenv = env.extendEnvRef(bindings);
			doExp.eval(nenv);
		}
	}

    public String toString() {
        String s = "(";
        String sep = "";
        for (int i=0 ; i<refArray.length ; i++) {
            s += sep + refArray[i].deRef().toString();
            sep = ",";
        }
        s += ")";
        return s;
    }
}
%%%
