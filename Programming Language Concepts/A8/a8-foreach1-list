ListVal
%%%

public abstract class ListVal extends Val implements Len {
	
    public abstract String toString(String sep);

    public ListVal add(Val v) {
        // System.err.println("adding " + v);
	return new ListNode(v, this);
    }

    public ListVal listVal() {
        return this;
    }

	public abstract void iterate(Token var, Exp doExp, Env env);
}

%%%

ListNode
%%%
import java.util.*;

public class ListNode extends ListVal {

    public Val val;
    public ListVal listVal;
    public int len;
    
    public ListNode(Val val, ListVal listVal) {
        this.val = val;
        this.listVal = listVal;
        this.len = 1 + listVal.len();
    }
    
    public Env env() {
        throw new RuntimeException("ListVal: no environment");
    }

    public boolean isList() {
	return true;
    }

    public String toString() {
        return "[" + this.toString("") + "]";
    }

    public String putc() {
	return val.putc() + listVal.putc();
    }

    public int len() {
        return len;
    }

    public String toString(String sep) {
        return sep + val + listVal.toString(",");
    }

	public void iterate(Token var, Exp doExp, Env env) {
		Bindings bindings = new Bindings();
		bindings.add(var.toString(), new ValRef(val));
		Env nenv = env.extendEnvRef(bindings);
		doExp.eval(nenv);
		listVal.iterate(var, doExp, env);
	}
}
%%%

ListNull
%%%
import java.util.*;

public class ListNull extends ListVal {

    public ListNull() {
    }

    public Env env() {
        throw new RuntimeException("ListVal: no environment");
    }

    public boolean isList() {
	return true;
    }

    public boolean isTrue() {
        return false;
    }

    public int len() {
        return 0;
    }

    public String toString() {
        return "[]";
    }

    public String putc() {
	return "";
    }

    public String toString(String sep) {
        return "";
    }

	public void iterate(Token var, Exp doExp, Env env){
	}
}

%%%
