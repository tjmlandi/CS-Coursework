# Language V6
#   Language V5 + top-level defines

# Lexical specification
#   variable names (VAR) now can have a '?' in them
skip WHITESPACE '\s+'
skip COMMENT '%.*'
LIT '\d+'
LPAREN '\('
RPAREN '\)'
COMMA ','
ADDOP '\+'
SUBOP '\-'
MULOP '\*'
DIVOP '/'
IF 'if'
THEN 'then'
ELSE 'else'
LET 'let'
LETREC 'letrec'
DEFINE 'define'
IN 'in'
EQUALS '='
PROC 'proc'
DOT '\.'
LBRACE '\{'
RBRACE '\}'
SEMI ';'
VAR '[A-Za-z][\w?]*'
%
# Grammar
<program>:Define ::= DEFINE <VAR> EQUALS <exp>
<program>:Eval ::= <exp>
<exp>:LitExp   ::= <LIT>
<exp>:VarExp   ::= <VAR>
<exp>:IfExp    ::= IF <exp>testExp THEN <exp>trueExp ELSE <exp>falseExp
<exp>:PrimExp  ::= <prim>
<exp>:LetExp   ::= LET <letDecls> IN <exp>
<exp>:LetrecExp ::= LETREC <letrecDecls> IN <exp>
<exp>:ProcExp  ::= <proc>
<exp>:AppExp   ::= DOT <exp> LPAREN <rands> RPAREN
<exp>:SeqExp   ::= LBRACE <exp> <seqExps> RBRACE
<seqExps>      **= SEMI <exp>
<proc>         ::= PROC LPAREN <formals> RPAREN <exp>
<formals>      **= <VAR> +COMMA
<letDecls>     **= <VAR> EQUALS <exp>
<letrecDecls>  **= <VAR> EQUALS <proc>
<rands>        **= <exp> +COMMA
<prim>:AddPrim ::= ADDOP
<prim>:SubPrim ::= SUBOP
<prim>:MulPrim ::= MULOP
<prim>:DivPrim ::= DIVOP
%
include code
include prim
include env
include val
