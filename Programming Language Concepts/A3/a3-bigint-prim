Prim
%%%
    // apply the primitive to the passed values
    public abstract Val apply(Val [] va);
%%%

AddPrim
%%%

    public String toString() {
	return "+";
    }

    public Val apply(Val [] va) {
	if (va.length != 2)
	    throw new RuntimeException("two arguments expected");
	IntVal i0 = (IntVal)va[0];
	IntVal i1 = (IntVal)va[1];
	return i0.add(i1);
    }
%%%

SubPrim
%%%

    public String toString() {
	return "-";
    }

    public Val apply(Val [] va) {
	if (va.length != 2)
	    throw new RuntimeException("two arguments expected");
	IntVal i0 = (IntVal)va[0];
	IntVal i1 = (IntVal)va[1];
	return i0.subtract(i1);
    }
%%%

MulPrim
%%%

    public String toString() {
	return "*";
    }

    public Val apply(Val [] va) {
	if (va.length != 2)
	    throw new RuntimeException("two arguments expected");
	IntVal i0 = (IntVal)va[0];
	IntVal i1 = (IntVal)va[1];
	return i0.multiply(i1);
    }

%%%

DivPrim
%%%

    public String toString() {
	return "/";
    }

    public Val apply(Val [] va) {
	if (va.length != 2)
	    throw new RuntimeException("two arguments expected");
	IntVal i0 = (IntVal)va[0];
	IntVal i1 = (IntVal)va[1];
	if (!i1.isTrue())
            throw new RuntimeException("attempt to divide by zero");
	return new IntVal(i0.divide(i1));
    }

%%%

Add1Prim
%%%

    public String toString() {
	return "add1";
    }

    public Val apply(Val [] va) {
	if (va.length != 1)
	    throw new RuntimeException("one argument expected");
	IntVal i0 = (IntVal)va[0];
	return i0.add1();
    }

%%%

Sub1Prim
%%%

    public String toString() {
	return "sub1";
    }

    public Val apply(Val [] va) {
	if (va.length != 1)
	    throw new RuntimeException("one argument expected");
	IntVal i0 = (IntVal)va[0];
	return i0.sub1();
    }

%%%

ZeropPrim
%%%

    public String toString() {
	return "zero?";
    }

    public Val apply(Val [] va) {
        if (va.length != 1)
	    throw new RuntimeException("one argument expected");
	IntVal i0 = (IntVal)va[0];
	return i0.zerop();
    }

%%%

